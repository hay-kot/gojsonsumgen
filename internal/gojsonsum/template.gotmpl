// Code generated by gojsonsumtype DO NOT EDIT.
package {{ .PackageName }}

import (
  "encoding/json"
)

{{ range $t := .SumTypes }}
var ({{- range $key, $value :=  $t.TypeMap }}
  {{ $t.Discriminator }}{{ $value }} = "{{ $key }}"
{{- end }}
)

// {{ $t.TypeName }} is a union type for the member types within the set. Marshalling and unmarshalling
// is done by the root type, and the raw JSON is saved until the type is narrowed, then we can 
// unmarshal it into the correct type.
//
// You can narrow the type using the Is<Type> and As<Type> methods generated for each member type.
//
// {{ $t.TypeName }} also supports the AsAny method, which returns the concrete type as an any. This
// is useful when you don't need to underlying type directly, but can cast it to another interface
// that the underlying type implements.
//
// Supported types:
{{- range $key, $value :=  $t.TypeMap }}
//  - {{ $value }}
{{- end }}
type {{ $t.TypeName }} struct {
  {{ $t.Opts.Name }} string `json:"{{ $t.Opts.Tag }}"`
  raw json.RawMessage
}

// UnmarshalJSON unmarshals the JSON into the root type ({{ $t.TypeName }}) and saves the raw JSON.
// This is saved until we know which type it is, then we can unmarshal it into the correct type.
func (v *{{ $t.TypeName }}) UnmarshalJSON(data []byte) error {
  v.raw = data
  var raw struct {
    {{ $t.Opts.Name }} string `json:"{{ $t.Opts.Tag }}"`
  }
  if err := json.Unmarshal(data, &raw); err != nil {
    return err
  }
  v.{{ $t.Opts.Name }} = raw.{{ $t.Opts.Name }}
  return nil
}

func (v *{{ $t.TypeName }}) MarshalJSON() ([]byte, error) {
  return v.raw, nil
}

// AsAny returns the concrete type as an any.
func (v *{{ $t.TypeName }}) AsAny() (any) {
  switch v.{{ $t.Opts.Name }} {
  {{- range $key, $value :=  $t.TypeMap }}
  case {{ $t.Discriminator }}{{ $value }}:
    obj, _ := v.As{{ $value }}()
    return obj
  {{- end }}
  default:
    return nil
  }
}

{{ range $key, $value :=  $t.TypeMap }}
// Is{{ $value }} returns true if the value is {{ $value }}.
func (v *{{ $t.TypeName }}) Is{{ $value }}() bool {
  return v.{{ $t.Opts.Name }} == {{ $t.Discriminator }}{{ $value }}
}

// As{{ $value }} returns the value as {{ $value }} if it is a {{ $value }}.
func (v *{{ $t.TypeName }}) As{{ $value }}() ({{ $value }}, bool) {
  if !v.Is{{ $value }}() {
    return {{ $value }}{}, false
  }

  var obj {{ $value }}
  if err := json.Unmarshal(v.raw, &obj); err != nil {
    return {{ $value }}{}, false
  }

  return obj, true
}
{{ end }}
{{ end }}
